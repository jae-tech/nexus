/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as StaffRouteImport } from './routes/staff'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as ServicesRouteImport } from './routes/services'
import { Route as ReservationsRouteImport } from './routes/reservations'
import { Route as CustomersRouteImport } from './routes/customers'
import { Route as IndexRouteImport } from './routes/index'
import { Route as CustomersIdRouteImport } from './routes/customers.$id'

const StaffRoute = StaffRouteImport.update({
  id: '/staff',
  path: '/staff',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const ServicesRoute = ServicesRouteImport.update({
  id: '/services',
  path: '/services',
  getParentRoute: () => rootRouteImport,
} as any)
const ReservationsRoute = ReservationsRouteImport.update({
  id: '/reservations',
  path: '/reservations',
  getParentRoute: () => rootRouteImport,
} as any)
const CustomersRoute = CustomersRouteImport.update({
  id: '/customers',
  path: '/customers',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const CustomersIdRoute = CustomersIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => CustomersRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/customers': typeof CustomersRouteWithChildren
  '/reservations': typeof ReservationsRoute
  '/services': typeof ServicesRoute
  '/settings': typeof SettingsRoute
  '/staff': typeof StaffRoute
  '/customers/$id': typeof CustomersIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/customers': typeof CustomersRouteWithChildren
  '/reservations': typeof ReservationsRoute
  '/services': typeof ServicesRoute
  '/settings': typeof SettingsRoute
  '/staff': typeof StaffRoute
  '/customers/$id': typeof CustomersIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/customers': typeof CustomersRouteWithChildren
  '/reservations': typeof ReservationsRoute
  '/services': typeof ServicesRoute
  '/settings': typeof SettingsRoute
  '/staff': typeof StaffRoute
  '/customers/$id': typeof CustomersIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/customers'
    | '/reservations'
    | '/services'
    | '/settings'
    | '/staff'
    | '/customers/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/customers'
    | '/reservations'
    | '/services'
    | '/settings'
    | '/staff'
    | '/customers/$id'
  id:
    | '__root__'
    | '/'
    | '/customers'
    | '/reservations'
    | '/services'
    | '/settings'
    | '/staff'
    | '/customers/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CustomersRoute: typeof CustomersRouteWithChildren
  ReservationsRoute: typeof ReservationsRoute
  ServicesRoute: typeof ServicesRoute
  SettingsRoute: typeof SettingsRoute
  StaffRoute: typeof StaffRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/staff': {
      id: '/staff'
      path: '/staff'
      fullPath: '/staff'
      preLoaderRoute: typeof StaffRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/services': {
      id: '/services'
      path: '/services'
      fullPath: '/services'
      preLoaderRoute: typeof ServicesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/reservations': {
      id: '/reservations'
      path: '/reservations'
      fullPath: '/reservations'
      preLoaderRoute: typeof ReservationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/customers': {
      id: '/customers'
      path: '/customers'
      fullPath: '/customers'
      preLoaderRoute: typeof CustomersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/customers/$id': {
      id: '/customers/$id'
      path: '/$id'
      fullPath: '/customers/$id'
      preLoaderRoute: typeof CustomersIdRouteImport
      parentRoute: typeof CustomersRoute
    }
  }
}

interface CustomersRouteChildren {
  CustomersIdRoute: typeof CustomersIdRoute
}

const CustomersRouteChildren: CustomersRouteChildren = {
  CustomersIdRoute: CustomersIdRoute,
}

const CustomersRouteWithChildren = CustomersRoute._addFileChildren(
  CustomersRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CustomersRoute: CustomersRouteWithChildren,
  ReservationsRoute: ReservationsRoute,
  ServicesRoute: ServicesRoute,
  SettingsRoute: SettingsRoute,
  StaffRoute: StaffRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
